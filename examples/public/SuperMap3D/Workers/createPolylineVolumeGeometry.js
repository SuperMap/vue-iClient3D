define(["./when-7d8885d2","./Cartesian2-54f49cd5","./arrayRemoveDuplicates-30a3675e","./BoundingRectangle-0828d65a","./buildModuleUrl-9403d69d","./Cartographic-9ee1f1bd","./ComponentDatatype-94b9147c","./PolylineVolumeGeometryLibrary-28009add","./Check-737bd4ec","./GeometryAttribute-bf27d0ff","./GeometryAttributes-2f749385","./GeometryPipeline-78c783ae","./IndexDatatype-cb5f74b7","./Math-4ffce144","./PolygonPipeline-68e6c052","./FeatureDetection-07e177c7","./VertexFormat-86386b6b","./Event-1c0f5ff4","./RuntimeError-f53bcb51","./WebGLConstants-6b41cc89","./Cartesian4-6d2e270a","./EllipsoidTangentPlane-adf29704","./IntersectionTests-6a0482c9","./Plane-74ce87e7","./PolylinePipeline-89be7253","./EllipsoidGeodesic-83f454fb","./EllipsoidRhumbLine-fd512dba","./AttributeCompression-cd5a3a25","./EncodedCartesian3-8b0babb6"],(function(e,t,n,a,i,r,o,l,s,p,c,d,u,m,y,g,f,h,b,v,C,P,E,_,k,L,V,F,A){"use strict";function G(n){var a=(n=e.defaultValue(n,e.defaultValue.EMPTY_OBJECT)).polylinePositions,i=n.shapePositions;this._positions=a,this._shape=i,this._ellipsoid=t.Ellipsoid.clone(e.defaultValue(n.ellipsoid,t.Ellipsoid.WGS84)),this._cornerType=e.defaultValue(n.cornerType,l.CornerType.ROUNDED),this._vertexFormat=f.VertexFormat.clone(e.defaultValue(n.vertexFormat,f.VertexFormat.DEFAULT)),this._granularity=e.defaultValue(n.granularity,m.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry",this.enuCenter=e.defaultValue(n.enuCenter,r.Cartesian3.ZERO);var o=1+a.length*r.Cartesian3.packedLength;o+=1+i.length*t.Cartesian2.packedLength+r.Cartesian3.packedLength,this.packedLength=o+t.Ellipsoid.packedLength+f.VertexFormat.packedLength+2}G.pack=function(n,a,i){var o;i=e.defaultValue(i,0);var l=n._positions,s=l.length;for(a[i++]=s,o=0;o<s;++o,i+=r.Cartesian3.packedLength)r.Cartesian3.pack(l[o],a,i);var p=n._shape;for(s=p.length,a[i++]=s,o=0;o<s;++o,i+=t.Cartesian2.packedLength)t.Cartesian2.pack(p[o],a,i);return t.Ellipsoid.pack(n._ellipsoid,a,i),i+=t.Ellipsoid.packedLength,f.VertexFormat.pack(n._vertexFormat,a,i),i+=f.VertexFormat.packedLength,a[i++]=n._cornerType,a[i++]=n._granularity,r.Cartesian3.pack(n.enuCenter,a,i),a};var T=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),D=new f.VertexFormat,x={polylinePositions:void 0,shapePositions:void 0,ellipsoid:T,vertexFormat:D,cornerType:void 0,granularity:void 0,enuCenter:void 0};G.unpack=function(n,a,i){var o;a=e.defaultValue(a,0);var l=n[a++],s=new Array(l);for(o=0;o<l;++o,a+=r.Cartesian3.packedLength)s[o]=r.Cartesian3.unpack(n,a);l=n[a++];var p=new Array(l);for(o=0;o<l;++o,a+=t.Cartesian2.packedLength)p[o]=t.Cartesian2.unpack(n,a);var c=t.Ellipsoid.unpack(n,a,T);a+=t.Ellipsoid.packedLength;var d=f.VertexFormat.unpack(n,a,D);a+=f.VertexFormat.packedLength;var u,m=n[a++],y=n[a++];return u=r.Cartesian3.unpack(n,a),e.defined(i)?(i._positions=s,i._shape=p,i._ellipsoid=t.Ellipsoid.clone(c,i._ellipsoid),i._vertexFormat=f.VertexFormat.clone(d,i._vertexFormat),i._cornerType=m,i._granularity=y,i.enuCenter=u,i):(x.polylinePositions=s,x.shapePositions=p,x.cornerType=m,x.granularity=y,x.enuCenter=u,new G(x))};var w=new a.BoundingRectangle;return G.createGeometry=function(t){for(var s=t._positions,m=n.arrayRemoveDuplicates(s,r.Cartesian3.equalsEpsilon),f=m.length,h=new Array(f),b=0;b<f;b++)h[b]=r.Cartesian3.clone(m[b]);var v=t._shape;if(v=l.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(v),!(m.length<2||v.length<3)){y.PolygonPipeline.computeWindingOrder2D(v)===y.WindingOrder.CLOCKWISE&&v.reverse();var C=a.BoundingRectangle.fromPoints(v,w),P={};if(P.combinedPositions=l.PolylineVolumeGeometryLibrary.computePositions(h,v,C,t,!0),!r.Cartesian3.equals(t.enuCenter,r.Cartesian3.ZERO)){var E=new Array(f);for(b=0;b<f;b++)E[b]=r.Cartesian3.clone(m[b]);P.combinedLocalPositions=l.PolylineVolumeGeometryLibrary.computeLocalPositions(E,v,C,t,!0,t.enuCenter)}return function(t,n,a,r){var l=t.combinedPositions,s=t.combinedLocalPositions,m=new c.GeometryAttributes;r.position&&(m.position=new p.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:l}));var f,h,b,v,C,P,E=n.length,_=l.length/3,k=(_-2*E)/(2*E),L=y.PolygonPipeline.triangulate(n),V=(k-1)*E*6+2*L.length,F=u.IndexDatatype.createTypedArray(_,V),A=2*E,G=0;for(f=0;f<k-1;f++){for(h=0;h<E-1;h++)P=(b=2*h+f*E*2)+A,C=(v=b+1)+A,F[G++]=v,F[G++]=b,F[G++]=C,F[G++]=C,F[G++]=b,F[G++]=P;C=(v=1+(b=2*E-2+f*E*2))+A,P=b+A,F[G++]=v,F[G++]=b,F[G++]=C,F[G++]=C,F[G++]=b,F[G++]=P}if(r.st||r.tangent||r.bitangent){var T,D,x=new Float32Array(2*_),w=1/(k-1),R=1/a.height,O=a.height/2,S=0;for(f=0;f<k;f++){for(T=f*w,D=R*(n[0].y+O),x[S++]=T,x[S++]=D,h=1;h<E;h++)D=R*(n[h].y+O),x[S++]=T,x[S++]=D,x[S++]=T,x[S++]=D;D=R*(n[0].y+O),x[S++]=T,x[S++]=D}for(h=0;h<E;h++)T=0,D=R*(n[h].y+O),x[S++]=T,x[S++]=D;for(h=0;h<E;h++)T=(k-1)*w,D=R*(n[h].y+O),x[S++]=T,x[S++]=D;m.st=new p.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(x)})}var B=_-2*E;for(f=0;f<L.length;f+=3){var I=L[f]+B,N=L[f+1]+B,U=L[f+2]+B;F[G++]=I,F[G++]=N,F[G++]=U,F[G++]=U+E,F[G++]=N+E,F[G++]=I+E}var W=new p.Geometry({attributes:m,indices:F,boundingSphere:i.BoundingSphere.fromVertices(l),primitiveType:g.PrimitiveType.TRIANGLES});if(r.normal&&(W=d.GeometryPipeline.computeNormal(W)),r.tangent||r.bitangent){try{W=d.GeometryPipeline.computeTangentAndBitangent(W)}catch(e){i.oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}r.tangent||(W.attributes.tangent=void 0),r.bitangent||(W.attributes.bitangent=void 0),r.st||(W.attributes.st=void 0)}return e.defined(s)&&(W.attributes.position.values=s,W.attributes.position.componentDatatype=o.ComponentDatatype.FLOAT),W}(P,v,C,t._vertexFormat)}},function(n,a){return e.defined(a)&&(n=G.unpack(n,a)),n._ellipsoid=t.Ellipsoid.clone(n._ellipsoid),G.createGeometry(n)}}));

define(["./when-b60132fc","./buildModuleUrl-c0836874","./EllipsoidRhumbLine-18dee174","./Cartesian4-442405e6","./Color-276cc288","./FeatureDetection-caf5f946","./Math-3024ab74","./GeometryAttribute-eb047ff3","./GeometryAttributes-252e9929","./IndexDatatype-a3f4b187","./Cartographic-2cfa3a3a","./EllipsoidGeodesic-97d03085","./Plane-6b2f5e52","./Cartesian2-c4c2a8f9","./PrimitiveType-ebb8c588","./VertexFormat-ae18728e","./WebGLConstants-aba9fc67","./Transforms-04c4d562"],(function(e,a,r,t,i,n,o,l,s,c,u,p,d,h,f,C,m,v){"use strict";var y={numberOfPoints:function(e,a,r){var i=t.Cartesian3.distance(e,a);return Math.ceil(i/r)},numberOfPointsRhumbLine:function(e,a,r){var t=Math.pow(e.longitude-a.longitude,2)+Math.pow(e.latitude-a.latitude,2);return Math.ceil(Math.sqrt(t/(r*r)))}},g=new u.Cartographic;y.extractHeights=function(e,a){for(var r=e.length,t=new Array(r),i=0;i<r;i++){var n=e[i];t[i]=a.cartesianToCartographic(n,g).height}return t};var w=new h.Matrix4,T=new t.Cartesian3,A=new t.Cartesian3,_=new d.Plane(t.Cartesian3.UNIT_X,0),E=new t.Cartesian3,P=new d.Plane(t.Cartesian3.UNIT_X,0),b=new t.Cartesian3,x=new t.Cartesian3,D=[];function G(e,a,r){var t,i=D;if(i.length=e,a===r){for(t=0;t<e;t++)i[t]=a;return i}var n=(r-a)/e;for(t=0;t<e;t++){var o=a+t*n;i[t]=o}return i}var S=new u.Cartographic,V=new u.Cartographic,k=new t.Cartesian3,L=new t.Cartesian3,M=new t.Cartesian3,F=new p.EllipsoidGeodesic,R=new r.EllipsoidRhumbLine;function O(e,a,r,i,n,o,l,s,c){var u=i.scaleToGeodeticSurface(e,L),p=i.scaleToGeodeticSurface(a,M),d=y.numberOfPoints(e,a,r),h=i.cartesianToCartographic(u,S),f=i.cartesianToCartographic(p,V),C=G(d,n,o);c>0&&(C=function(e,a){var r=D;r.length=e;for(var t=0;t<e;t++)r[t]=a*Math.sin(Math.PI*t/e);return r}(d,c)),F.setEndPoints(h,f);var m=F.surfaceDistance/d,v=s;h.height=n;var g=i.cartographicToCartesian(h,k);t.Cartesian3.pack(g,l,v),v+=3;for(var w=1;w<d;w++){var T=F.interpolateUsingSurfaceDistance(w*m,V);T.height=C[w],g=i.cartographicToCartesian(T,k),t.Cartesian3.pack(g,l,v),v+=3}return v}function I(e,a,i,n,o,l,s,c){var u=n.scaleToGeodeticSurface(e,L),p=n.scaleToGeodeticSurface(a,M),d=n.cartesianToCartographic(u,S),h=n.cartesianToCartographic(p,V),f=y.numberOfPointsRhumbLine(d,h,i),C=G(f,o,l);R.ellipsoid.equals(n)||(R=new r.EllipsoidRhumbLine(void 0,void 0,n)),R.setEndPoints(d,h);var m=R.surfaceDistance/f,v=c;d.height=o;var g=n.cartographicToCartesian(d,k);t.Cartesian3.pack(g,s,v),v+=3;for(var w=1;w<f;w++){var T=R.interpolateUsingSurfaceDistance(w*m,V);T.height=C[w],g=n.cartographicToCartesian(T,k),t.Cartesian3.pack(g,s,v),v+=3}return v}y.wrapLongitude=function(a,r){var i=[],n=[];if(e.defined(a)&&a.length>0){r=e.defaultValue(r,h.Matrix4.IDENTITY);var o=h.Matrix4.inverseTransformation(r,w),l=h.Matrix4.multiplyByPoint(o,t.Cartesian3.ZERO,T),s=t.Cartesian3.normalize(h.Matrix4.multiplyByPointAsVector(o,t.Cartesian3.UNIT_Y,A),A),c=d.Plane.fromPointNormal(l,s,_),u=t.Cartesian3.normalize(h.Matrix4.multiplyByPointAsVector(o,t.Cartesian3.UNIT_X,E),E),p=d.Plane.fromPointNormal(l,u,P),f=1;i.push(t.Cartesian3.clone(a[0]));for(var C=i[0],m=a.length,v=1;v<m;++v){var y=a[v];if(d.Plane.getPointDistance(p,C)<0||d.Plane.getPointDistance(p,y)<0){var g=d.IntersectionTests.lineSegmentPlane(C,y,c,b);if(e.defined(g)){var D=t.Cartesian3.multiplyByScalar(s,5e-9,x);d.Plane.getPointDistance(c,C)<0&&t.Cartesian3.negate(D,D),i.push(t.Cartesian3.add(g,D,new t.Cartesian3)),n.push(f+1),t.Cartesian3.negate(D,D),i.push(t.Cartesian3.add(g,D,new t.Cartesian3)),f=1}}i.push(t.Cartesian3.clone(a[v])),f++,C=y}n.push(f)}return{positions:i,lengths:n}},y.generateArc=function(r){e.defined(r)||(r={});var i=r.positions,n=i.length,l=e.defaultValue(r.ellipsoid,a.Ellipsoid.WGS84),s=e.defaultValue(r.height,0),c=Array.isArray(s);if(n<1)return[];if(1===n){var u=l.scaleToGeodeticSurface(i[0],L);if(0!==(s=c?s[0]:s)){var p=l.geodeticSurfaceNormal(u,k);t.Cartesian3.multiplyByScalar(p,s,p),t.Cartesian3.add(u,p,u)}return[u.x,u.y,u.z]}var d=r.minDistance;if(!e.defined(d)){var h=e.defaultValue(r.granularity,o.CesiumMath.RADIANS_PER_DEGREE);d=o.CesiumMath.chordLength(h,l.maximumRadius)}var f,C=0;for(f=0;f<n-1;f++)C+=y.numberOfPoints(i[f],i[f+1],d);var m=r.hMax,v=3*(C+1),g=new Array(v),w=0;for(f=0;f<n-1;f++){w=O(i[f],i[f+1],d,l,c?s[f]:s,c?s[f+1]:s,g,w,m)}D.length=0;var T=i[n-1],A=l.cartesianToCartographic(T,S);A.height=c?s[n-1]:s;var _=l.cartographicToCartesian(A,k);return t.Cartesian3.pack(_,g,v-3),g};var N=new u.Cartographic,B=new u.Cartographic;y.generateRhumbArc=function(r){e.defined(r)||(r={});var i=r.positions,n=i.length,l=e.defaultValue(r.ellipsoid,a.Ellipsoid.WGS84),s=e.defaultValue(r.height,0),c=Array.isArray(s);if(n<1)return[];if(1===n){var p=l.scaleToGeodeticSurface(i[0],L);if(0!==(s=c?s[0]:s)){var d=l.geodeticSurfaceNormal(p,k);t.Cartesian3.multiplyByScalar(d,s,d),t.Cartesian3.add(p,d,p)}return[p.x,p.y,p.z]}var h,f,C=e.defaultValue(r.granularity,o.CesiumMath.RADIANS_PER_DEGREE),m=0,v=l.cartesianToCartographic(i[0],N);for(h=0;h<n-1;h++)f=l.cartesianToCartographic(i[h+1],B),m+=y.numberOfPointsRhumbLine(v,f,C),v=u.Cartographic.clone(f,N);var g=3*(m+1),w=new Array(g),T=0;for(h=0;h<n-1;h++){T=I(i[h],i[h+1],C,l,c?s[h]:s,c?s[h+1]:s,w,T)}D.length=0;var A=i[n-1],_=l.cartesianToCartographic(A,S);_.height=c?s[n-1]:s;var E=l.cartographicToCartesian(_,k);return t.Cartesian3.pack(E,w,g-3),w},y.generateCartesianArc=function(e){for(var a=y.generateArc(e),r=a.length/3,i=new Array(r),n=0;n<r;n++)i[n]=t.Cartesian3.unpack(a,3*n);return i},y.generateCartesianRhumbArc=function(e){for(var a=y.generateRhumbArc(e),r=a.length/3,i=new Array(r),n=0;n<r;n++)i[n]=t.Cartesian3.unpack(a,3*n);return i};var U=[];function W(e,a,r,t,n){var o,l=U;l.length=n;var s=r.red,c=r.green,u=r.blue,p=r.alpha,d=t.red,h=t.green,f=t.blue,C=t.alpha;if(i.Color.equals(r,t)){for(o=0;o<n;o++)l[o]=i.Color.clone(r);return l}var m=(d-s)/n,v=(h-c)/n,y=(f-u)/n,g=(C-p)/n;for(o=0;o<n;o++)l[o]=new i.Color(s+o*m,c+o*v,u+o*y,p+o*g);return l}function z(n){var l,s,c=(n=e.defaultValue(n,e.defaultValue.EMPTY_OBJECT)).positions,u=n.colors,p=e.defaultValue(n.width,1),d=e.defaultValue(n.hMax,-1),h=e.defaultValue(n.colorsPerVertex,!1);this._positions=c,this._colors=u,this._width=p,this._hMax=d,this._colorsPerVertex=h,this._dist=n.dist,this._period=n.period,this._vertexFormat=C.VertexFormat.clone(e.defaultValue(n.vertexFormat,C.VertexFormat.DEFAULT)),this._followSurface=e.defaultValue(n.followSurface,!0),e.defined(n.followSurface)&&(l="PolylineGeometry.followSurface",s="PolylineGeometry.followSurface is deprecated and will be removed in Cesium 1.55. Use PolylineGeometry.arcType instead.",a.oneTimeWarning(l,s),n.arcType=n.followSurface?r.ArcType.GEODESIC:r.ArcType.NONE),this._arcType=e.defaultValue(n.arcType,r.ArcType.GEODESIC),this._followSurface=this._arcType!==r.ArcType.NONE,this._granularity=e.defaultValue(n.granularity,o.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=a.Ellipsoid.clone(e.defaultValue(n.ellipsoid,a.Ellipsoid.WGS84)),this._workerName="createPolylineGeometry";var f=1+c.length*t.Cartesian3.packedLength;f+=e.defined(u)?1+u.length*i.Color.packedLength:1,this.packedLength=f+a.Ellipsoid.packedLength+C.VertexFormat.packedLength+4+2}z.pack=function(r,n,o){var l;o=e.defaultValue(o,0);var s=r._positions,c=s.length;for(n[o++]=c,l=0;l<c;++l,o+=t.Cartesian3.packedLength)t.Cartesian3.pack(s[l],n,o);var u=r._colors;for(c=e.defined(u)?u.length:0,n[o++]=c,l=0;l<c;++l,o+=i.Color.packedLength)i.Color.pack(u[l],n,o);return a.Ellipsoid.pack(r._ellipsoid,n,o),o+=a.Ellipsoid.packedLength,C.VertexFormat.pack(r._vertexFormat,n,o),o+=C.VertexFormat.packedLength,n[o++]=r._width,n[o++]=r._colorsPerVertex?1:0,n[o++]=r._arcType,n[o++]=r._granularity,n[o++]=r._hMax,n[o++]=r._dist,n[o]=r._period,n};var Y=a.Ellipsoid.clone(a.Ellipsoid.UNIT_SPHERE),q=new C.VertexFormat,H={positions:void 0,colors:void 0,ellipsoid:Y,vertexFormat:q,width:void 0,colorsPerVertex:void 0,arcType:void 0,granularity:void 0};z.unpack=function(r,n,o){var l;n=e.defaultValue(n,0);var s=r[n++],c=new Array(s);for(l=0;l<s;++l,n+=t.Cartesian3.packedLength)c[l]=t.Cartesian3.unpack(r,n);var u=(s=r[n++])>0?new Array(s):void 0;for(l=0;l<s;++l,n+=i.Color.packedLength)u[l]=i.Color.unpack(r,n);var p=a.Ellipsoid.unpack(r,n,Y);n+=a.Ellipsoid.packedLength;var d=C.VertexFormat.unpack(r,n,q);n+=C.VertexFormat.packedLength;var h=r[n++],f=1===r[n++],m=r[n++],v=r[n++],y=r[n++],g=1==r[n++],w=r[n];return e.defined(o)?(o._positions=c,o._colors=u,o._ellipsoid=a.Ellipsoid.clone(p,o._ellipsoid),o._vertexFormat=C.VertexFormat.clone(d,o._vertexFormat),o._width=h,o._colorsPerVertex=f,o._arcType=m,o._granularity=v,o._hMax=y,o._dist=g,o._period=w,o):(H.positions=c,H.colors=u,H.width=h,H.colorsPerVertex=f,H.arcType=m,H.granularity=v,H.hMax=y,H.dist=g,H.period=w,new z(H))};var X=new t.Cartesian3,J=new t.Cartesian3,Z=new t.Cartesian3,j=new t.Cartesian3;return z.createGeometry=function(u){var p,d,h,C=u._width,m=u._hMax,v=u._vertexFormat,g=u._colors,w=u._colorsPerVertex,T=u._arcType,A=u._granularity,_=u._ellipsoid,E=u._dist,P=u._period,b=r.arrayRemoveDuplicates(u._positions,t.Cartesian3.equalsEpsilon),x=b.length;if(!(x<2||C<=0)){if(T===r.ArcType.GEODESIC||T===r.ArcType.RHUMB){var D,G;T===r.ArcType.GEODESIC?(D=o.CesiumMath.chordLength(A,_.maximumRadius),G=y.numberOfPoints):(D=A,G=y.numberOfPointsRhumbLine);var S=y.extractHeights(b,_);if(e.defined(g)){var V=1;for(p=0;p<x-1;++p)V+=G(b[p],b[p+1],D);var k=new Array(V),L=0;for(p=0;p<x-1;++p){var M=b[p],F=b[p+1],R=g[p],O=G(M,F,D);if(w&&p<V){var I=W(0,0,R,g[p+1],O),N=I.length;for(d=0;d<N;++d)k[L++]=I[d]}else for(d=0;d<O;++d)k[L++]=i.Color.clone(R)}k[L]=i.Color.clone(g[g.length-1]),g=k,U.length=0}b=T===r.ArcType.GEODESIC?y.generateCartesianArc({positions:b,minDistance:D,ellipsoid:_,height:S,hMax:m}):y.generateCartesianRhumbArc({positions:b,granularity:D,ellipsoid:_,height:S})}var B,z=4*(x=b.length)-4,Y=new Float64Array(3*z),q=new Float64Array(3*z),H=new Float64Array(3*z),K=new Float32Array(2*z),Q=v.st?new Float32Array(2*z):void 0,$=e.defined(g)?new Uint8Array(4*z):void 0,ee=E?new Float32Array(3*z):void 0,ae=0,re=0,te=0,ie=0,ne=0,oe=0;for(d=0;d<x;++d){var le,se;0===d?(B=X,t.Cartesian3.subtract(b[0],b[1],B),t.Cartesian3.add(b[0],B,B)):B=b[d-1],t.Cartesian3.clone(B,Z),t.Cartesian3.clone(b[d],J),d===x-1?(B=X,t.Cartesian3.subtract(b[x-1],b[x-2],B),t.Cartesian3.add(b[x-1],B,B)):B=b[d+1],t.Cartesian3.clone(B,j),e.defined($)&&(le=0===d||w?g[d]:g[d-1],d!==x-1&&(se=g[d]));var ce=d===x-1?2:4;for(h=0===d?2:0;h<ce;++h){t.Cartesian3.pack(J,Y,ae),t.Cartesian3.pack(Z,q,ae),t.Cartesian3.pack(j,H,ae),ae+=3;var ue=h-2<0?-1:1,pe=h%2*2-1,de=pe*d/x;if(K[re++]=m>0?de:pe,K[re++]=ue*C,v.st&&(Q[te++]=d/(x-1),Q[te++]=Math.max(K[re-2],0)),e.defined($)){var he=h<2?le:se;$[ie++]=i.Color.floatToByte(he.red),$[ie++]=i.Color.floatToByte(he.green),$[ie++]=i.Color.floatToByte(he.blue),$[ie++]=i.Color.floatToByte(he.alpha)}E&&(ee[3*ne]=oe,ne++)}oe+=t.Cartesian3.distance(B,b[d])}if(E){var fe=oe,Ce=Math.random()*(P>0?P:fe);for(d=0;d<z;d++)ee[3*d+1]=fe,ee[3*d+2]=Ce}var me=new s.GeometryAttributes;me.position=new l.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:Y}),me.prevPosition=new l.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:q}),me.nextPosition=new l.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:H}),me.expandAndWidth=new l.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:K}),v.st&&(me.st=new l.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:Q})),e.defined($)&&(me.color=new l.GeometryAttribute({componentDatatype:n.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:$,normalize:!0})),E&&(me.dist=new l.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:ee}));var ve=c.IndexDatatype.createTypedArray(z,6*x-6),ye=0,ge=0,we=x-1;for(d=0;d<we;++d)ve[ge++]=ye,ve[ge++]=ye+2,ve[ge++]=ye+1,ve[ge++]=ye+1,ve[ge++]=ye+2,ve[ge++]=ye+3,ye+=4;return new l.Geometry({attributes:me,indices:ve,primitiveType:f.PrimitiveType.TRIANGLES,boundingSphere:a.BoundingSphere.fromPoints(b),geometryType:l.GeometryType.POLYLINES})}},function(r,t){return e.defined(t)&&(r=z.unpack(r,t)),r._ellipsoid=a.Ellipsoid.clone(r._ellipsoid),z.createGeometry(r)}}));
